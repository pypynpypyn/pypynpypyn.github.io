#cost function in tensorflow

import numpy as np
#numpy를 import함

X = np.array([1,2,3])
Y = np.array([1,2,3])
# 입력과 출력이 동일함

def cost func(W,X,Y) #cost함수를 설정
hypothesis = X * W #hypothesis를 설정함
return th.reduce_mean(tf.square(hypothesis - Y)) #hypothesis에서 y를 빼고 평균을 냄

W_value = np.linspace(-3, 5, num=15) #-3에서 5까지의 구간을 15개로 쪼갬, 그 값을 리스트로 받음
cost_value = []

for feed_W in W_value: #리스트 값을 하나하나 뽑음
curr_cost = cost_func(feed_W, X, Y) #뽑은 값을 w으로 사용하여 cost가 w에 따라서 어떻게 변하는지를 기록
cost_value.append(curr_cost)
print("{:6.3f | {:10.5f}".format(feed_W, curr_cost)) #출력

-3.000 |   74.66667
-2.429 |   54.85714
-1.857 |   38.09524
-1.286 |   24.38095
-0.714 |   13.71429
-0.143 |    6.09524
 0.429 |    1.52381
 1.000 |    0.00000
 1.571 |    1.52381
 2.143 |    6.09524
 2.714 |   13.71429
 3.286 |   24.38095
 3.857 |   38.09524
 4.429 |   54.85714
 5.000 |   74.66667
 
#gradient descent
tf.set_random_seed(0) #for reproducibility
#다음번에도 동일하게 재현이 될수 있도록 하기 위해 랜던시드를 특정한 값으로 초기화를 시킴

x_data = [1,2,3,4,5]
y_data = [1,2,3,4,5]
#X,Y데이터를 준비

W = tf.variable(tf.random_normal([1], -100, 100.)) 
#정규분포를 따르는 랜덤분포를 한개 짜리로 변수를 만들어 W에 할당하여 정의 

for step in range(300):
    hypothesis = W * X #hypothesis 함수 정의 
    cost = tf.reduce_mean(tf.square(hypothesis - Y)) #cost 함수를 정의 
    
    alpha = 0.01
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W,X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assighn(descent)
    #본 문단을 300회 반복한다
    
    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
             step, cost.numpy(), W.numpy()[0]))
    #반복하면서 10번마다 한번씩 결과 값을 출력
    
    0 | 11716.3086 |  48.767971
   10 |  4504.9126 |  30.619968
   20 |  1732.1364 |  19.366755
   30 |   666.0052 |  12.388859
   40 |   256.0785 |   8.062004
   50 |    98.4620 |   5.379007
   60 |    37.8586 |   3.715335
   70 |    14.5566 |   2.683725
   80 |     5.5970 |   2.044044
   90 |     2.1520 |   1.647391
  100 |     0.8275 |   1.401434
  110 |     0.3182 |   1.248922
  120 |     0.1223 |   1.154351
  130 |     0.0470 |   1.095710
  140 |     0.0181 |   1.059348
  150 |     0.0070 |   1.036801
  160 |     0.0027 |   1.022819
  170 |     0.0010 |   1.014150
  180 |     0.0004 |   1.008774
  190 |     0.0002 |   1.005441
  200 |     0.0001 |   1.003374
  210 |     0.0000 |   1.002092
  220 |     0.0000 |   1.001297
  230 |     0.0000 |   1.000804
  240 |     0.0000 |   1.000499
  250 |     0.0000 |   1.000309
  260 |     0.0000 |   1.000192
  270 |     0.0000 |   1.000119
  280 |     0.0000 |   1.000074
  290 |     0.0000 |   1.000046

#output when W = 5 #W의 값이 5일때 결과 값 구하기

x_data = [1., 2., 3., 4.]
y_data = [1., 3., 5., 7.]

W = tf.Variable([5.0]) # W값을 5로 가정

for step in range(300):
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y))

    alpha = 0.01
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assign(descent)
    
    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0]))
            
    0 |    74.6667 |   4.813334
   10 |    28.7093 |   3.364572
   20 |    11.0387 |   2.466224
   30 |     4.2444 |   1.909177
   40 |     1.6320 |   1.563762
   50 |     0.6275 |   1.349578
   60 |     0.2413 |   1.216766
   70 |     0.0928 |   1.134412
   80 |     0.0357 |   1.083346
   90 |     0.0137 |   1.051681
  100 |     0.0053 |   1.032047
  110 |     0.0020 |   1.019871
  120 |     0.0008 |   1.012322
  130 |     0.0003 |   1.007641
  140 |     0.0001 |   1.004738
  150 |     0.0000 |   1.002938
  160 |     0.0000 |   1.001822
  170 |     0.0000 |   1.001130
  180 |     0.0000 |   1.000700
  190 |     0.0000 |   1.000434
  200 |     0.0000 |   1.000269
  210 |     0.0000 |   1.000167
  220 |     0.0000 |   1.000103
  230 |     0.0000 |   1.000064
  240 |     0.0000 |   1.000040
  250 |     0.0000 |   1.000025
  260 |     0.0000 |   1.000015
  270 |     0.0000 |   1.000009
  280 |     0.0000 |   1.000006
  290 |     0.0000 |   1.000004
